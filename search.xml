<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Excerpt 片段</title>
      <link href="/2025/01/27/excerpt1/"/>
      <url>/2025/01/27/excerpt1/</url>
      
        <content type="html"><![CDATA[<h2 id="Excerpt-1-海陆之间"><a href="#Excerpt-1-海陆之间" class="headerlink" title="Excerpt 1 海陆之间"></a>Excerpt 1 海陆之间</h2><p>Lgy 在海滨有一个临时住所。每当如此时此刻他无处可去时，就会来到这个能暂时保他一命的地方。<br>庇护所隐藏在海边的丛林中，似乎很难找到。<br>跟随这 Lgy 的步伐， Jcy 也来到了这里，他明白过来庇护所也就是用从林木搭建的临时仓库。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excerpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Segment Tree 线段树笔记</title>
      <link href="/2025/01/27/SegT/"/>
      <url>/2025/01/27/SegT/</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><blockquote><p>线段树是一种能够处理区间修改和区间查询的数据结构。</p></blockquote><p>顾名思义，线段树就是一种存储着线段数据的树形结构。它的每个节点都表示一个线段区间，每个节点的孩子节点存储的就是该区间的左半段和右半段。每个线段区间都存储着一个值，一般是区间和，也有可能是区间最大&#x2F;最小值。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>线段树使用数组实现，根节点编号为 $1$ 表示区间 $1$ 到 $n$，左子节点是 $i \times 2$，右子节点是 $i \times 2 + 1$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">return</span> p &lt;&lt; <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">return</span> p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>从根节点开始，不断的分割区间直到该区间只剩单个数，然后开始向上汇总。传入两个变量 <code>l</code> 和 <code>r</code>， 表示当前节点表示的线段。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushUp</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">sum[p] = sum[<span class="built_in">lc</span>(p)] + sum[<span class="built_in">rc</span>(p)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll p, ll l, ll r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[p] = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="built_in">lc</span>(p), l, mid);</span><br><span class="line"><span class="built_in">build</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushUp</span>(p); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><p>从根节点开始，如果当前的线段不被查询的区间完全包含就一直分两段尝试，直到它被完全包含了，返回该线段的值然后继续递归其他的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(ll p, ll l, ll r, ll ql, ll qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushDown</span>(p, l, r);</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= mid)&#123;</span><br><span class="line">ans += <span class="built_in">Query</span>(<span class="built_in">lc</span>(p), l, mid, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(qr &gt; mid)&#123;</span><br><span class="line">ans += <span class="built_in">Query</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><p>如果每次修改都从上到下全改一遍，复杂度得 $\mathcal{O}(n)$ ，太浪费时间了，完全体现不出线段树的优势所在。因此引入懒标记（Lazy Tag）。和查询一样，当线段被区间完全覆盖时，对应的节点自己更新，但它的孩子们不更新。这时给他安上一个懒标记，表示它的子节点需要更新的大小。当区间没有完全覆盖，需要拆分的时候，将当前变量的标记拆掉，传给子节点，这样才不会错算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(ll p, ll l, ll r, ll ql, ll qr, ll d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class="line">sum[p] += d * (r - l + <span class="number">1</span>);</span><br><span class="line">tag[p] += d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushDown</span>(p, l, r);</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= mid)&#123;</span><br><span class="line"><span class="built_in">Update</span>(<span class="built_in">lc</span>(p), l, mid, ql, qr, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(qr &gt; mid)&#123;</span><br><span class="line"><span class="built_in">Update</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r, ql, qr, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度估算"><a href="#复杂度估算" class="headerlink" title="复杂度估算"></a>复杂度估算</h2><p>由于线段树原理是每个区间分两段，再将两端区间分别分段以此类推，又有 $n$ 个元素，因此线段树的高度是 $\log n$ 的。而区间修改和查询最坏都要遍历一遍每一层，因此修改和查询的复杂度都是 $\mathcal{O}\log n$ 的，足以应付大部分题目。</p><h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><p>题目：<a href="https://www.luogu.com.cn/problem/P3372">洛谷 P3372【模板】线段树 1</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll sum[<span class="number">4</span> * MAXN], a[MAXN], tag[<span class="number">4</span> * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">return</span> p &lt;&lt; <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll p)</span></span>&#123;<span class="keyword">return</span> p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushUp</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">sum[p] = sum[<span class="built_in">lc</span>(p)] + sum[<span class="built_in">rc</span>(p)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll p, ll l, ll r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[p] = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="built_in">lc</span>(p), l, mid);</span><br><span class="line"><span class="built_in">build</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">pushUp</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveTag</span><span class="params">(ll p, ll l, ll r, ll t)</span></span>&#123;</span><br><span class="line">sum[p] += t * (r - l + <span class="number">1</span>);</span><br><span class="line">tag[p] += t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushDown</span><span class="params">(ll p, ll l, ll r)</span></span>&#123;</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">moveTag</span>(<span class="built_in">lc</span>(p), l, mid, tag[p]);</span><br><span class="line"><span class="built_in">moveTag</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r, tag[p]);</span><br><span class="line">tag[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(ll p, ll l, ll r, ll ql, ll qr, ll d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class="line">sum[p] += d * (r - l + <span class="number">1</span>);</span><br><span class="line">tag[p] += d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushDown</span>(p, l, r);</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= mid)&#123;</span><br><span class="line"><span class="built_in">Update</span>(<span class="built_in">lc</span>(p), l, mid, ql, qr, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(qr &gt; mid)&#123;</span><br><span class="line"><span class="built_in">Update</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r, ql, qr, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Query</span><span class="params">(ll p, ll l, ll r, ll ql, ll qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushDown</span>(p, l, r);</span><br><span class="line">ll mid = (l + r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= mid)&#123;</span><br><span class="line">ans += <span class="built_in">Query</span>(<span class="built_in">lc</span>(p), l, mid, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(qr &gt; mid)&#123;</span><br><span class="line">ans += <span class="built_in">Query</span>(<span class="built_in">rc</span>(p), mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>); </span><br><span class="line">ll n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span>(m --)&#123;</span><br><span class="line">ll o, x, y, k;</span><br><span class="line">cin &gt;&gt; o;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line"><span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First BLog</title>
      <link href="/2025/01/26/First-Blog/"/>
      <url>/2025/01/26/First-Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="First-Blog"><a href="#First-Blog" class="headerlink" title="First Blog"></a>First Blog</h1><p>这是我的第一篇博客，以此纪念经历一周方才搭建成功的博客。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Unknown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memento </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
